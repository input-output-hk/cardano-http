name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.6.5"]
        os: [ubuntu-latest]

    steps:
    - name: Install OS Packages
      uses: mstksg/get-package@2a4b48d5
      with:
        apt-get: libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev libsodium-dev
        brew: libsodium

    - uses: actions/checkout@v2.3.4

    - name: Select optimal cabal version
      run: |
        case "$OS" in
          Windows_NT)   echo "CABAL_VERSION=3.4.0.0-rc5"  >> $GITHUB_ENV;;
          *)            echo "CABAL_VERSION=3.4.0.0-rc4"  >> $GITHUB_ENV;;
        esac

    - name: Install Haskell
      uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ env.CABAL_VERSION }}

    - name: Show Haskell tool versions
      run: |
        ghc --version
        cabal --version

    - name: Cache cabal store
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cabal-store-${{ env.CACHE_VERSION }}-${{ matrix.ghc }}-${{ matrix.os }}

    - name: Update Hackage index
      run: cabal update

    - name: Cabal Configure
      run: cabal --builddir="$CABAL_BUILDDIR" configure --enable-tests

    - name: Build dependencies
      run: cabal --builddir="$CABAL_BUILDDIR" build --only-dependencies all

    - name: Build projects
      run: cabal --builddir="$CABAL_BUILDDIR" build all

    - name: Test projects
      if: matrix.os == 'windows-latest'
      run: cabal --builddir="$CABAL_BUILDDIR" test all

    - name: Build & Test
      run: |
        mkdir -p artefacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          ( cd artefacts
            tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
          )
        done

    - name: Save Artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.os }}_cardano-rest
        path: ./artifacts

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact (linux)
      uses: actions/download-artifact@v1
      with:
        name: ubuntu-latest_cardano-rest

    - name: Download Artifact (macOS)
      uses: actions/download-artifact@v1
      with:
        name: macOS-latest_cardano-rest

    - name: Upload Release Asset (cardano-explorer-api, linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu-latest_cardano-rest/cardano-explorer-api.tar.gz
        asset_name: cardano-explorer-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (cardano-explorer-api, macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macOS-latest_cardano-rest/cardano-explorer-api.tar.gz
        asset_name: cardano-explorer-api_${{ steps.create_release_tag.outputs.TAG }}-macOS.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (cardano-submit-api, linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu-latest_cardano-rest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (cardano-submit-api, macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macOS-latest_cardano-rest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-macOS.tar.gz
        asset_content_type: application/gzip
